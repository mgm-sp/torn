#!/bin/sh

###################################################
#  Torn - cut screenshots into pieces
#  Copyright 2019 Benjamin Kellermann
#
#  This file is heavily inspired of Shutter.
#  Copyright (C) 2008-2013 Mario Kemper <mario.kemper@gmail.com>
#
#  Shutter is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  Shutter is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Shutter; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
###################################################

usage(){
	echo "usage: $(basename "$0") [-rltb] [-c <cropfrom-to>|-a <autocrop-color>] [-i] <filename> [<dest_file>]"
	echo "ex:    $(basename "$0") -rt foo.png # right and top are straight"
	echo "ex:    $(basename "$0") -rl -c 200-300 foo.png # right and left are straight, cut from px 200-300"
	echo "ex:    $(basename "$0") -rl -a FF0000 foo.png # right and left are straight, cut everything which has color FF000"
	echo "ex:    $(basename "$0") -i foo.png # launch interactive selection"
	exit 1
}

RIGHT_O=true
RIGHT=-10+0
LEFT_O=true
LEFT=+10+0
TOP_O=true
TOP=+0+10
BOTTOM_O=true
BOTTOM=+0-10

paint() {
	if [ "true" = "$LEFT_O" ];then
		L="┆"
	else
		L="│"
	fi
	if [ "true" = "$RIGHT_O" ];then
		R="┆"
	else
		R="│"
	fi
	printf "┌"
	if [ "true" = "$TOP_O" ];then
		printf "┈┈┈┈┈┈┈┈┈t┈┈┈┈┈┈┈┈┈"
	else
		printf "─────────t─────────"
	fi
	printf "┐\n"

	printf "%s                   %s\n" $L $R

	if [ -n "$AUTOCUT_COLOR" ];then
		printf "├"
		printf "┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈"
		printf "┤\n"

		printf "l      #%s      r\n" "$AUTOCUT_COLOR"

		printf "├"
		printf "┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈"
		printf "┤\n"
	else
		printf "l                   r\n"
	fi

	printf "%s                   %s\n" $L $R

	printf "└"
	if [ "true" = "$BOTTOM_O" ];then
		printf "┈┈┈┈┈┈┈┈┈b┈┈┈┈┈┈┈┈┈"
	else
		printf "─────────b─────────"
	fi
	printf "┘\n"
	printf "[tlbr#q] "
}
# from https://unix.stackexchange.com/questions/464930/can-i-read-a-single-character-from-stdin-in-posix-shell
readc() { # arg: <variable-name>
  if [ -t 0 ]; then
    # if stdin is a tty device, put it out of icanon, set min and
    # time to sane value, but don't otherwise touch other input or
    # or local settings (echo, isig, icrnl...). Take a backup of the
    # previous settings beforehand.
    saved_tty_settings=$(stty -g)
    stty -icanon min 1 time 0
  fi
  eval "$1="
  while
    # read one byte, using a work around for the fact that command
    # substitution strips the last character.
    c=$(dd bs=1 count=1 2> /dev/null; echo .)
    c=${c%.}

    # break out of the loop on empty input (eof) or if a full character
    # has been accumulated in the output variable (using "wc -m" to count
    # the number of characters).
    [ -n "$c" ] &&
      eval "$1=\${$1}"'$c
        [ "$(($(printf %s "${'"$1"'}" | wc -m)))" -eq 0 ]'; do
    continue
  done
  if [ -t 0 ]; then
    # restore settings saved earlier if stdin is a tty device.
    stty "$saved_tty_settings"
  fi
}

while getopts rltbc:a:i option; do
	case "$option" in
		i)
			paint
			while readc C; do
				if [ -z "$AUTOCUT_COLOR" ]; then N=5; else N=7; fi
				case "$C" in
					r) if [ "true" = $RIGHT_O ]; then RIGHT_O=false; else RIGHT_O=true; fi ;;
					l) if [ "true" = $LEFT_O ]; then LEFT_O=false; else LEFT_O=true; fi ;;
					t) if [ "true" = $TOP_O ]; then TOP_O=false; else TOP_O=true; fi ;;
					b) if [ "true" = $BOTTOM_O ]; then BOTTOM_O=false; else BOTTOM_O=true; fi ;;
					"#") readc A; readc B; readc C; readc D; readc E; readc F; AUTOCUT_COLOR="$A$B$C$D$E$F" ;;
					q) printf "\rPlease wait while processing your screenshot..."; break;;
				esac
				printf "\r\033[K\033[${N}A"
				paint
			done
			;;
		r) RIGHT_O=false ;;
		l) LEFT_O=false ;;
		t) TOP_O=false;;
		b) BOTTOM_O=false;;
		c)
			CUT_FROM=$(echo "$OPTARG"|cut -f1 -d-|grep "^[0-9]*$")
			CUT_TO=$(echo "$OPTARG"|cut -f2 -d-|grep "^[0-9]*$")
			if [ -z "$CUT_TO" ] || [ -z "$CUT_FROM" ]; then
				echo "Error: Wrong format for -c"
				exit
			fi
			;;
		a)
			AUTOCUT_COLOR=$OPTARG
			;;
		\?) usage ;;
	esac
done
shift $(expr $OPTIND - 1)

case $# in
	0)
		echo "Wrong number of arguments"
		usage
		exit
		;;
	1)
		INFILE="$1"
		OUTFILE="$1"
		;;
	2)
		INFILE="$1"
		OUTFILE="$2"
		;;
	*)
		usage
		;;
esac

if [ -n "$AUTOCUT_COLOR" ] && [ -n "$CUT_FROM" ]; then
	echo "Error: You may only use -c or -a"
	exit
fi
if [ -n "$AUTOCUT_COLOR" ] || [ -n "$CUT_FROM" ]; then
	SIZE_W=$(identify -format "%[fx:w]" "$INFILE")
	SIZE_H=$(identify -format "%[fx:h]" "$INFILE")
fi
if [ -n "$CUT_FROM" ]; then
	if [ "$CUT_TO" -le "$CUT_FROM" ];then
		echo "Error: $CUT_FROM is larger than $CUT_TO"
		exit
	fi
	if [ "$CUT_TO" -ge "$SIZE_H" ];then
		echo "Error: $CUT_TO is larger than the height of the picture ($SIZE_H)"
		exit
	fi

fi

TMPFILE=$(mktemp "torned_tmp_$(basename "$INFILE")_XXXXXX")

cp "$INFILE" "$TMPFILE"

torn() {
	# add border on all sides we do not want an effect
	mogrify -border 10 "$1"
	for side in $2; do
		C=$(echo "$side"|cut -f1 -d,)
		Q=$(echo "$side"|cut -f2 -d,)
		if [ "$Q" = "true" ]; then
			mogrify -crop "$C" +repage "$1"
		fi
	done

	# Generate torned effect

	convert "$1" \( +clone -threshold -1 -virtual-pixel black \
		-spread 10 -blur 0x3 -threshold 50% -spread 1 -blur 0x.7 \) \
		+matte -compose Copy_Opacity -composite "$1"

	# remove added border on all sides we do not want an effect
	for side in $2; do
		C=$(echo "$side"|cut -f1 -d,)
		Q=$(echo "$side"|cut -f2 -d,)
		if [ "$Q" = "false" ]; then
			mogrify -crop "$C" +repage "$1"
		fi
	done

	# Add hard shadow
	convert "$1" \( +clone -background black  -shadow 80x3+5+5 \) \
		+swap -background none -mosaic +repage "$1"
}

if [ -n "$AUTOCUT_COLOR" ]; then
	TXT_TMPFILE=$(mktemp "torned_tmp_$(basename "$INFILE")_XXXXXX.txt")
	convert "$TMPFILE" -alpha deactivate -crop 1x10000+0+0 "$TXT_TMPFILE"

	FROM_TO=$(grep -i "$AUTOCUT_COLOR" "$TXT_TMPFILE" |cut -f1 -d:|cut -f2 -d, |tr "\n" "X" |sed 's/^\([^X]*\).*X\([^X]*\)X$/\1 \2/')
	CUT_FROM=$(echo $FROM_TO |cut -f1 -d" ")
	CUT_TO=$(echo $FROM_TO |cut -f2 -d" ")
	CUT_TO=$((CUT_TO + 1))

	rm "$TXT_TMPFILE"
fi

if [ -n "$CUT_FROM" ]; then
	TOP_TMPFILE=$(mktemp "torned-top_tmp_$(basename "$INFILE")_XXXXXX")
	convert "${TMPFILE}" -crop "${SIZE_W}x${CUT_FROM}+0+0" +repage "${TOP_TMPFILE}"
	BOT_TMPFILE=$(mktemp "torned-bot_tmp_$(basename "$INFILE")_XXXXXX")
	convert "${TMPFILE}" -crop "${SIZE_W}x$((SIZE_H - CUT_TO))+0+${CUT_TO}" +repage "${BOT_TMPFILE}"

	torn "$TOP_TMPFILE" "$RIGHT,$RIGHT_O $LEFT,$LEFT_O $TOP,$TOP_O $BOTTOM,true"
	torn "$BOT_TMPFILE" "$RIGHT,$RIGHT_O $LEFT,$LEFT_O $TOP,true $BOTTOM,$BOTTOM_O"
	convert -append "$TOP_TMPFILE" "$BOT_TMPFILE" "$TMPFILE"
	rm "$TOP_TMPFILE" "$BOT_TMPFILE"
else
	torn "$TMPFILE" "$RIGHT,$RIGHT_O $LEFT,$LEFT_O $TOP,$TOP_O $BOTTOM,$BOTTOM_O"
fi

mv "$TMPFILE" "$OUTFILE"

exit 0



