#!/bin/sh

###################################################
#  Torn - cut screenshots into pieces
#  Copyright 2019 Benjamin Kellermann
#
#  This file is heavily inspired of Shutter.
#  Copyright (C) 2008-2013 Mario Kemper <mario.kemper@gmail.com>
#
#  Shutter is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  Shutter is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with Shutter; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
###################################################

usage(){
	echo "usage: $(basename "$0") [-rltb] [-c <from-to>] <filename> [<dest_file>]"
	echo "ex:    $(basename "$0") -rt foo.png # right and top are straight"
	echo "ex:    $(basename "$0") -rl -c 200-300 foo.png # right and left are straight, cut from px 200-300"
	exit 1
}

RIGHT_O=true
RIGHT=-10+0
LEFT_O=true
LEFT=+10+0
TOP_O=true
TOP=+0+10
BOTTOM_O=true
BOTTOM=+0-10

while getopts rltbc: option; do
	case "$option" in
		r) RIGHT_O=false ;;
		l) LEFT_O=false ;;
		t) TOP_O=false;;
		b) BOTTOM_O=false;;
		c)
			CUT_FROM=$(echo "$OPTARG"|cut -f1 -d-|grep "^[0-9]*$")
			CUT_TO=$(echo "$OPTARG"|cut -f2 -d-|grep "^[0-9]*$")
			if [ -z "$CUT_TO" ] || [ -z "$CUT_FROM" ]; then
				echo "Error: Wrong format for -c"
				exit
			fi
			;;
		\?) usage ;;
	esac
done
shift $(expr $OPTIND - 1)

case $# in
	0)
		echo "Wrong number of arguments"
		usage
		exit
		;;
	1)
		INFILE="$1"
		OUTFILE="$1"
		;;
	2)
		INFILE="$1"
		OUTFILE="$2"
		;;
	*)
		usage
		;;
esac

if [ -n "$CUT_FROM" ]; then
	SIZE_W=$(identify -format "%[fx:w]" "$INFILE")
	SIZE_H=$(identify -format "%[fx:h]" "$INFILE")
	if [ "$CUT_TO" -le "$CUT_FROM" ];then
		echo "Error: $CUT_FROM is larger than $CUT_TO"
		exit
	fi
	if [ "$CUT_TO" -ge "$SIZE_H" ];then
		echo "Error: $CUT_TO is larger than the height of the picture ($SIZE_H)"
		exit
	fi

fi

TMPFILE=$(mktemp "torned_tmp_XXXXXX_$(basename "$INFILE")")

cp "$INFILE" "$TMPFILE"

torn() {
	# add border on all sides we do not want an effect
	mogrify -border 10 "$1"
	for side in $2; do
		C=$(echo "$side"|cut -f1 -d,)
		Q=$(echo "$side"|cut -f2 -d,)
		if [ "$Q" = "true" ]; then
			mogrify -crop "$C" +repage "$1"
		fi
	done

	# Generate torned effect

	convert "$1" \( +clone -threshold -1 -virtual-pixel black \
		-spread 10 -blur 0x3 -threshold 50% -spread 1 -blur 0x.7 \) \
		+matte -compose Copy_Opacity -composite "$1"

	# remove added border on all sides we do not want an effect
	for side in $2; do
		C=$(echo "$side"|cut -f1 -d,)
		Q=$(echo "$side"|cut -f2 -d,)
		if [ "$Q" = "false" ]; then
			mogrify -crop "$C" +repage "$1"
		fi
	done

	# Add hard shadow
	convert "$1" \( +clone -background black  -shadow 80x3+5+5 \) \
		+swap -background none -mosaic +repage "$1"
}

if [ -n "$CUT_FROM" ]; then
	TOP_TMPFILE=$(mktemp "torned-top_tmp_XXXXXX_$(basename "$INFILE")")
	convert "${TMPFILE}" -crop "${SIZE_W}x${CUT_FROM}+0+0" +repage "${TOP_TMPFILE}"
	BOT_TMPFILE=$(mktemp "torned-bot_tmp_XXXXXX_$(basename "$INFILE")")
	convert "${TMPFILE}" -crop "${SIZE_W}x$((SIZE_H - CUT_TO))+0+${CUT_TO}" +repage "${BOT_TMPFILE}"

	torn "$TOP_TMPFILE" "$RIGHT,$RIGHT_O $LEFT,$LEFT_O $TOP,$TOP_O $BOTTOM,true"
	torn "$BOT_TMPFILE" "$RIGHT,$RIGHT_O $LEFT,$LEFT_O $TOP,true $BOTTOM,$BOTTOM_O"
	convert -append "$TOP_TMPFILE" "$BOT_TMPFILE" "$TMPFILE"
	rm "$TOP_TMPFILE" "$BOT_TMPFILE"
else
	torn "$TMPFILE" "$RIGHT,$RIGHT_O $LEFT,$LEFT_O $TOP,$TOP_O $BOTTOM,$BOTTOM_O"
fi

mv "$TMPFILE" "$OUTFILE"

exit 0



